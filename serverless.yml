# 서비스명
service: flask-serverless

# 사용할 Serverless framework 플러그인
plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-wsgi
custom:
  userTableName: 'flask-serverless-user-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

# 패키징 시 제외할 폴더
package:
  exclude:
    - node_modules/**
    - venv/**

# 배포할 프로바이더 설정
provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UserDynamoDBTable", "Arn" ] }
  # 환경변수
  environment:
    USER_TABLE: ${self:custom.userTableName}
    CONFIG: ${self:provider.stage}

# API Gateway 설정
functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http:
          path: user/{id}
          method: get
          integration: lambda-proxy
          cors: true
      - http:
          path: user
          method: post
          integration: lambda-proxy
          cors: true
      - http:
          path: user/{id}
          method: delete
          integration: lambda-proxy
          cors: true

# AWS Resource 설정
resources:
  Resources:
    # DynamoDB 생성 설정
    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}
